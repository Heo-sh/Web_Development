/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-04-20 06:49:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class gugudan_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  \r\n");
      out.write("Ajax(Asynchronous JavaScript and XML)\r\n");
      out.write("- 자바스크립트를 이용한 백그라운드 통신 기술(비동기 통신)\r\n");
      out.write("- '부분'새로고침\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>Insert title here</title>\r\n");
      out.write("		<!--  \r\n");
      out.write("		js/httpRequest.js를 위한 script라서\r\n");
      out.write("		새로운 javascript코드를 쓰려면\r\n");
      out.write("		다른 script태그를 써야 한다.\r\n");
      out.write("		아무 것도 작성하면 안된다.\r\n");
      out.write("		-->\r\n");
      out.write("		<script src=\"js/httpRequest.js\"></script>\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("			function send() {\r\n");
      out.write("				var dan = document.getElementById(\"dan\").value;\r\n");
      out.write("				\r\n");
      out.write("				var url = \"gugudan_ajax.jsp\"; //목적지\r\n");
      out.write("				\r\n");
      out.write("				var param = \"dan=\" + dan; //파라미터\r\n");
      out.write("				\r\n");
      out.write("				//sendRequest()메서드를 호출하지 않는다면\r\n");
      out.write("				//location.href = \"gugudan_ajax.jsp?dan=\" + dan;\r\n");
      out.write("				\r\n");
      out.write("				sendRequest(url, param, resultFn, \"GET\"); //sendRequest()메서드 호출\r\n");
      out.write("			} //send()\r\n");
      out.write("			\r\n");
      out.write("			//callback함수는 다른 함수 밖에다가 만들어야 한다.\r\n");
      out.write("			//callback함수 내부에 데이터를 받을 코드를 작성한다.\r\n");
      out.write("			function resultFn() { \r\n");
      out.write("				//alert(\"call back\");\r\n");
      out.write("				\r\n");
      out.write("				//Ajax에서 서버로부터 응답을 확인하기 위해 사용하는 XMLHttpRequest객체의 property는 다음과 같습니다.\r\n");
      out.write("				//1.readyState\r\n");
      out.write("				//- XMLHttpRequest객체의 상태를 보여준다.\r\n");
      out.write("				//- UNSET(숫자 : 0): XMLHttpRequest객체 생성됨\r\n");
      out.write("				//- OPEND(숫자 : 1): open()메서드가 성공적으로 실행됨\r\n");
      out.write("				//- HEADERS_RECEIVED(숫자 : 2): 모든 요청에 대한 응답이 도착함\r\n");
      out.write("				//- LOADING(숫자 : 3): 요청한 데이터를 처리 중\r\n");
      out.write("				//- DONE(숫자 : 4): 요청한 데이터의 처리가 완료되어 응답할 준비가 완료됨\r\n");
      out.write("				//2.status\r\n");
      out.write("				//- 서버의 문서상태를 나타낸다.\r\n");
      out.write("				//- 200: 서버에 문서가 존재함(문제없음)\r\n");
      out.write("				//- 404: 서버에 문서가 존재하지 않음\r\n");
      out.write("				//3.onreadystatechange\r\n");
      out.write("				console.log(xhr.readyState + \" / \" + xhr.status);\r\n");
      out.write("				\r\n");
      out.write("				if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("					//도착한 데이터 읽어오기\r\n");
      out.write("					var data = xhr.responseText; //최종결과값을 갖고 돌아온다.\r\n");
      out.write("					//alert(data);\r\n");
      out.write("					\r\n");
      out.write("					//innerHTML이 중복되는 태그들을 알아서 제거해준다.\r\n");
      out.write("					document.getElementById(\"disp\").innerHTML = data;\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		</script>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		단: <input id=\"dan\"> <!-- form태그 안에 있는 input태그의 value를 보낼 때는 name속성을 쓰고 그러지 않을 때는 id속성을 쓰는 게 좋다. -->\r\n");
      out.write("		<input type=\"button\" value=\"결과보기\" onclick=\"send()\">\r\n");
      out.write("		<br>\r\n");
      out.write("		<div id=\"disp\"></div>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
